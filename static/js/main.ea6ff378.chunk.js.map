{"version":3,"sources":["components/header.js","components/switch.js","components/top-card.js","components/top-card-list.js","components/overview-card.js","components/overview-card-list.js","components/footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","children","className","Switch","mode","setMode","checked","setChecked","inputRef","useRef","htmlFor","type","name","id","ref","onChange","current","TopCard","social","username","number","typeFollowers","today","tendence","src","alt","cardListData","TopCardList","map","cardData","key","OverviewCard","title","percentage","OverviewCardList","Footer","href","target","rel","App","useState","mainClass","changeMedia","mq","matches","useEffect","window","matchMedia","addListener","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ea6ff378.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../css/header.css\";\n\nfunction Header({ children }) {\n  return (\n    <header className=\"header\">\n      <div className=\"wrapper\">\n        <div className=\"header-grid\">\n          <div>\n            <h1>Social Media Dashboard</h1>\n            <p className=\"header-total\">Total Followers: 23,004</p>\n          </div>\n          {children}\n        </div>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","import React, { useRef } from \"react\";\n\nfunction Switch({ mode, setMode, checked, setChecked }) {\n  const inputRef = useRef(\"\");\n  function handleOnChange() {\n    setChecked(inputRef.current.checked);\n    setMode(inputRef.current.checked);\n  }\n\n  return (\n    <div className=\"header-dark-mode\">\n      <p className=\"dark-mode-title\">Dark Mode</p>\n      <div className=\"swith-dark-mode\">\n        <label htmlFor=\"checkbox\" className=\"switch\">\n          <input\n            type=\"checkbox\"\n            name=\"\"\n            id=\"checkbox\"\n            ref={inputRef}\n            onChange={handleOnChange}\n            checked={checked}\n          />\n          <span className={`slider ${mode}`}></span>\n        </label>\n      </div>\n    </div>\n  );\n}\n\nexport default Switch;\n","import React from \"react\";\n\nconst TopCard = ({\n  social,\n  username,\n  number,\n  typeFollowers,\n  today,\n  tendence,\n}) => {\n  return (\n    <article className={`card ${social}`}>\n      <p className=\"card-title\">\n        <img src={`images/icon-${social}.svg`} alt=\"\" />\n        {username}\n      </p>\n      <p className=\"card-followers\">\n        <span className=\"card-followers-number\">{number}</span>\n        <span className=\"card-followers-title\">{typeFollowers}</span>\n      </p>\n      <p className={`card-today ${tendence}`}>\n        <img src={`images/icon-${tendence}.svg`} alt=\"\" />\n        {today} Today\n      </p>\n    </article>\n  );\n};\n\nexport default TopCard;\n","import React from \"react\";\nimport \"../css/top-card.css\";\nimport TopCard from \"./top-card\";\n\nconst cardListData = [\n  {\n    id: 1,\n    social: \"facebook\",\n    username: \"@nathanf\",\n    number: \"1987\",\n    typeFollowers: \"Followers\",\n    today: \"12\",\n    tendence: \"up\",\n  },\n  {\n    id: 2,\n    social: \"twitter\",\n    username: \"@nathanf\",\n    number: \"1044\",\n    typeFollowers: \"Followers\",\n    today: \"99\",\n    tendence: \"up\",\n  },\n  {\n    id: 3,\n    social: \"instagram\",\n    username: \"@realnathanf\",\n    number: \"11k\",\n    typeFollowers: \"Followers\",\n    today: \"1099\",\n    tendence: \"up\",\n  },\n  {\n    id: 4,\n    social: \"youtube\",\n    username: \"Nathan F.\",\n    number: \"8239\",\n    typeFollowers: \"Subscribers\",\n    today: \"144\",\n    tendence: \"down\",\n  },\n];\nconst TopCardList = () => {\n  return (\n    <section className=\"top-cards\">\n      <div className=\"wrapper\">\n        <div className=\"grid\">\n          {cardListData.map((cardData) => (\n            <TopCard key={cardData.id} {...cardData} />\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default TopCardList;\n","import React from \"react\";\n\nconst OverviewCard = ({ title, social, number, tendence, percentage }) => {\n  return (\n    <article className=\"card-small\">\n      <p className=\"card-small-title\">{title}</p>\n      <p className=\"card-small-icon\">\n        <img src={`images/icon-${social}.svg`} alt=\"\" />\n      </p>\n      <p className=\"card-small-number\">{number}</p>\n      <p className={`card-small-percentage ${tendence}`}>\n        <span>\n          <img src={`images/icon-${tendence}.svg`} alt=\"\" />\n          {percentage}\n        </span>\n      </p>\n    </article>\n  );\n};\n\nexport default OverviewCard;\n","import React from \"react\";\nimport \"../css/overview-card.css\";\nimport OverviewCard from \"./overview-card\";\n\nconst cardListData = [\n  {\n    id: 1,\n    title: \"Page Views\",\n    social: \"facebook\",\n    number: \"87\",\n    tendence: \"up\",\n    percentage: \"3%\",\n  },\n  {\n    id: 2,\n    title: \"Likes\",\n    social: \"facebook\",\n    number: \"52\",\n    tendence: \"down\",\n    percentage: \"2%\",\n  },\n  {\n    id: 3,\n    title: \"Likes\",\n    social: \"instagram\",\n    number: \"5462\",\n    tendence: \"up\",\n    percentage: \"2257%\",\n  },\n  {\n    id: 4,\n    title: \"Profile Views\",\n    social: \"instagram\",\n    number: \"52k\",\n    tendence: \"up\",\n    percentage: \"1375%\",\n  },\n  {\n    id: 5,\n    title: \"Retweets\",\n    social: \"twitter\",\n    number: \"117\",\n    tendence: \"up\",\n    percentage: \"303%\",\n  },\n  {\n    id: 6,\n    title: \"Likes\",\n    social: \"twitter\",\n    number: \"507\",\n    tendence: \"up\",\n    percentage: \"553%\",\n  },\n  {\n    id: 7,\n    title: \"Likes\",\n    social: \"youtube\",\n    number: \"107\",\n    tendence: \"down\",\n    percentage: \"19%\",\n  },\n  {\n    id: 8,\n    title: \"Total Views\",\n    social: \"youtube\",\n    number: \"1407\",\n    tendence: \"down\",\n    percentage: \"12%\",\n  },\n];\nconst OverviewCardList = () => {\n  return (\n    <section className=\"overview\">\n      <div className=\"wrapper\">\n        <h2 className=\"overview-title\">Overview - Today</h2>\n        <div className=\"grid\">\n          {cardListData.map((cardData) => (\n            <OverviewCard key={cardData.id} {...cardData} />\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default OverviewCardList;\n","import React from \"react\";\nimport \"../css/footer.css\";\n\nconst Footer = () => {\n  return (\n    <footer className=\"attribution\">\n      Challenge by{\" \"}\n      <a\n        href=\"https://www.frontendmentor.io/challenges/social-media-dashboard-with-theme-switcher-6oY8ozp_H\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        Frontend Mentor\n      </a>\n      . Coded by <a href=\"https://citlallidmg.github.io/\">Citlalli Del Moral</a>\n      .\n    </footer>\n  );\n};\n\nexport default Footer;\n","import React, { useState, useEffect } from \"react\";\nimport \"./css/global.css\";\nimport Header from \"./components/header\";\nimport Switch from \"./components/switch\";\nimport TopCardList from \"./components/top-card-list\";\nimport OverviewCardList from \"./components/overview-card-list\";\nimport Footer from \"./components/footer\";\n\nfunction App() {\n  const [mode, setMode] = useState(false);\n  const [checked, setChecked] = useState(false);\n\n  const mainClass = mode ? \"dark-mode\" : \"light-mode\";\n\n  function changeMedia(mq) {\n    setMode(mq.matches);\n    setChecked(mq.matches);\n  }\n\n  useEffect(() => {\n    const mq = window.matchMedia(\"(prefers-color-scheme: dark)\");\n    mq.addListener(changeMedia);\n    setMode(mq.matches);\n    setChecked(mq.matches);\n  }, []);\n\n  return (\n    <main className={mainClass}>\n      <Header>\n        <Switch\n          mode={mainClass}\n          setMode={setMode}\n          checked={checked}\n          setChecked={setChecked}\n        />\n      </Header>\n      <TopCardList />\n      <OverviewCardList />\n      <Footer />\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}